[tools]
# Core Go tools
go = "1.25.1"
golangci-lint = "latest"

[tasks."test"]
description = "Run all tests"
depends = ["test:unit", "test:integration", "test:e2e", "test:race"]

[tasks."test:unit"]
description = "Run unit tests only"
run = "go test -short ./..."

[tasks."test:integration"]
description = "Run integration tests only"
run = "go test -tags=integration ./test/integration/..."

[tasks."test:race"]
description = "Run tests with race condition detection"
run = "CGO_ENABLED=1 go test -race ./..."

[tasks."test:e2e"]
description = "Run CLI end-to-end tests (quiet)"
depends = ["build:e2e"]
run = "ginkgo --tags=e2e ./test/e2e/..."

[tasks."build:e2e"]
description = "Build CLI binary for E2E tests"
run = "go build -tags=e2e -o bin/twiggit main.go"

[tasks."test:single"]
description = "Run single test - usage: mise run test:single TestName ./pkg/module"
run = "go test -run $1 $2"

[tasks."lint:check"]
description = "Run linting and formatting checks"
run = "golangci-lint run"

[tasks."lint:fix"]
description = "Auto-fix linting issues"
run = "golangci-lint run --fix"

[tasks."build:cli"]
description = "Build the CLI binary"
run = "go build -o bin/twiggit main.go"

[tasks."build:clean"]
description = "Clean build artifacts"
run = "rm -rf bin/ coverage*.out coverage.html"

[tasks."dev:run"]
description = "Test CLI structure"
run = "go run main.go --help"

[tasks."dev:tidy"]
description = "Clean up go.mod and go.sum"
run = "go mod tidy"

[tasks."ci:update-deps"]
description = "Securely update CI dependencies (mise version, Docker version, Go version, etc.)"
run = '''
#!/bin/bash
set -euo pipefail

echo "🔄 Updating CI dependencies securely..."

# Check if Docker is available
echo "🔍 Checking Docker availability..."
if ! command -v docker >/dev/null 2>&1; then
    echo "❌ Docker is not available!"
    echo "🔧 Docker is required for this project."
    echo "💡 To fix this issue:"
    echo "   1. Install Docker: https://docs.docker.com/get-docker/"
    echo "   2. Ensure Docker is in your PATH"
    exit 1
fi

# Check if Docker is running
if ! docker info >/dev/null 2>&1; then
    echo "❌ Docker daemon is not running!"
    echo "🔧 Docker daemon is required for this project."
    echo "💡 To fix this issue:"
    echo "   1. Start Docker daemon"
    echo "   2. Check Docker service status"
    exit 1
fi

# Check if Docker Buildx is available
echo "🔍 Checking Docker Buildx availability..."
if ! docker buildx version >/dev/null 2>&1; then
    echo "❌ Docker Buildx is not available!"
    echo "🔧 Docker Buildx is required for BuildKit support."
    echo "💡 To fix this issue:"
    echo "   1. Install Docker Buildx: https://docs.docker.com/go/buildx/"
    echo "   2. Or update Docker to a version that includes Buildx"
    echo "   3. For Docker Desktop, ensure Buildx is enabled"
    echo "   4. For this project, run: curl -L https://github.com/docker/buildx/releases/download/v0.16.2/buildx-v0.16.2.linux-amd64 -o ~/.docker/cli-plugins/docker-buildx && chmod +x ~/.docker/cli-plugins/docker-buildx"
    exit 1
fi

echo "✅ Docker and Buildx are available and running"

# Get latest mise release info
echo "📦 Fetching latest mise release..."
LATEST_MISE_RELEASE=$(curl -s https://api.github.com/repos/jdx/mise/releases/latest | grep -o '"tag_name": "v[^"]*' | cut -d'"' -f4)
MISE_VERSION=${LATEST_MISE_RELEASE#v}

echo "🔍 Getting mise binary checksum..."
# Download the binary and calculate checksum directly
MISE_X64_MUSL_CHECKSUM=$(curl -s -L https://github.com/jdx/mise/releases/download/${LATEST_MISE_RELEASE}/mise-${LATEST_MISE_RELEASE}-linux-x64-musl | sha256sum | cut -d' ' -f1)

echo "📋 Latest mise version: $MISE_VERSION"
echo "🔐 Checksum: $MISE_X64_MUSL_CHECKSUM"

# Get latest Alpine version
echo "🏔️ Fetching latest Alpine version..."
LATEST_ALPINE_VERSION=$(curl -s https://hub.docker.com/v2/repositories/library/alpine/tags/?page_size=100 | jq -r '.results[].name' | grep -E '^[0-9]+\.[0-9]+$' | sort -V | tail -1)

echo "📋 Latest Alpine version: $LATEST_ALPINE_VERSION"

# Get latest Docker version
echo "🐳 Fetching latest Docker version..."
LATEST_DOCKER_VERSION=$(curl -s https://hub.docker.com/v2/repositories/library/docker/tags/?page_size=100 | jq -r '.results[].name' | grep -E '^[0-9]+\.[0-9]+$' | sort -V | tail -1)

echo "📋 Latest Docker version: $LATEST_DOCKER_VERSION"

# Update Dockerfile with new mise version, checksum, and Alpine version
echo "🐳 Updating Dockerfile..."
sed -i.bak \
    -e "s/MISE_VERSION=v[0-9]*\\.[0-9]*\\.[0-9]*/MISE_VERSION=v$MISE_VERSION/" \
    -e "s/MISE_SHA256=[a-f0-9]*/MISE_SHA256=$MISE_X64_MUSL_CHECKSUM/" \
    -e "s/FROM alpine:[0-9]*\\.[0-9]*/FROM alpine:$LATEST_ALPINE_VERSION/" \
    Dockerfile

# Update GitLab CI with new Docker version
echo "🔧 Updating GitLab CI configuration..."
sed -i.bak \
    -e "s/image: docker:[0-9]*\\.[0-9]*/image: docker:$LATEST_DOCKER_VERSION/g" \
    -e "s/- docker:[0-9]*\\.[0-9]*-dind/- docker:$LATEST_DOCKER_VERSION-dind/g" \
    .gitlab-ci.yml

echo "✅ Files updated successfully"

# Test Docker build with BuildKit
echo "🧪 Testing Docker build with BuildKit..."
if docker buildx build --build-arg BUILDKIT_INLINE_CACHE=1 -t twiggit-ci-test:latest .; then
    # Verify mise version in built image
    MISE_IN_IMAGE=$(docker run --rm twiggit-ci-test:latest mise --version)
    echo "📦 Mise version in image: $MISE_IN_IMAGE"
    
    # Clean up test image
    docker rmi twiggit-ci-test:latest
    
    echo "✅ Docker build with BuildKit successful"
    
    echo "🎉 CI dependencies updated successfully!"
    echo "📋 Summary:"
    echo "   - Mise version: v$MISE_VERSION"
    echo "   - Checksum: $MISE_X64_MUSL_CHECKSUM"
    echo "   - Alpine version: $LATEST_ALPINE_VERSION"
    echo "   - Docker version: $LATEST_DOCKER_VERSION"
    echo "   - Dockerfile and .gitlab-ci.yml updated and tested"
    echo "   - BuildKit and Buildx working correctly"
else
    echo "❌ Docker build with BuildKit failed!"
    echo "🔧 BuildKit and Buildx are required for this project."
    echo "💡 To fix this issue:"
    echo "   1. Ensure Docker supports BuildKit (version 18.09+)"
    echo "   2. Install Docker Buildx: https://docs.docker.com/go/buildx/"
    echo "   3. Check Docker daemon is running"
    echo "   4. Verify build context is accessible"
    echo "🔄 Rolling back changes..."
    mv Dockerfile.bak Dockerfile
    mv .gitlab-ci.yml.bak .gitlab-ci.yml
    exit 1
fi
'''

[env]
CGO_ENABLED = "0"