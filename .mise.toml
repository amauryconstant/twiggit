[tools]
go = "1.25.1"
golangci-lint = "latest"

[tasks."test:all"]
description = "Run all tests with coverage"
run = "go test -coverprofile=coverage.out ./..."

[tasks."test:unit"]
description = "Run unit tests only"
run = "go test -short ./..."

[tasks."test:integration"]
description = "Run integration tests only"
run = "go test -tags=integration ./test/integration/..."

[tasks."test:race"]
description = "Run tests with race condition detection"
run = "CGO_ENABLED=1 go test -race ./..."

[tasks."test:ci"]
description = "Run CI test suite"
depends = ["test:unit", "test:integration", "test:race"]

[tasks."test:single"]
description = "Run single test - usage: mise run test:single TestName ./pkg/module"
run = "go test -run $1 $2"

[tasks."test:coverage"]
description = "Show coverage report in JSON format"
run = """
#!/bin/bash
go test -json -coverprofile=coverage.out ./... 2>&1 | \
  grep 'Action":"output".*"coverage' | \
  jq -r '"\\(.Package)\\t\\(.Output | split(": ")[1] | split(" of")[0])"' | \
  jq -sR '[split("\\n")[:-1] | map(select(. != "")) | map(split("\\t") | {package: .[0], coverage: .[1]})]'
"""

[tasks."test:coverage:func"]
description = "Show function coverage in JSON format"
run = """
#!/bin/bash
go tool cover -func=coverage.out | \
  awk 'NR>1 {print $1, $3}' | \
  jq -sR '[split("\\n")[:-1] | map(select(. != "")) | map(split(" ") | {function: .[0], coverage: .[1]})]'
"""

[tasks."test:coverage:selective"]
description = "Show coverage for specific packages in JSON - usage: mise run test:coverage:selective pkg1,pkg2"
run = """
#!/bin/bash
go test -json -coverpkg=$1 -coverprofile=coverage-selective.out ./... 2>&1 | \
  grep 'Action":"output".*"coverage' | \
  jq -r '"\\(.Package)\\t\\(.Output | split(": ")[1] | split(" of")[0])"' | \
  jq -sR '[split("\\n")[:-1] | map(select(. != "")) | map(split("\\t") | {package: .[0], coverage: .[1]})]'
"""

[tasks."test:coverage:core"]
description = "Show coverage for core business logic (domain, services)"
run = """
#!/bin/bash
go test -json -coverpkg=github.com/amaury/twiggit/internal/domain,github.com/amaury/twiggit/internal/services -coverprofile=coverage-core.out ./... 2>&1 | \
  grep 'Action":"output".*"coverage' | \
  jq -r '"\\(.Package)\\t\\(.Output | split(": ")[1] | split(" of")[0])"' | \
  jq -sR '[split("\\n")[:-1] | map(select(. != "")) | map(split("\\t") | {package: .[0], coverage: .[1]})]'
"""

[tasks."test:coverage:infrastructure"]
description = "Show coverage for infrastructure layer (config, git)"
run = """
#!/bin/bash
go test -json -coverpkg=github.com/amaury/twiggit/internal/infrastructure/config,github.com/amaury/twiggit/internal/infrastructure/git -coverprofile=coverage-infrastructure.out ./... 2>&1 | \
  grep 'Action":"output".*"coverage' | \
  jq -r '"\\(.Package)\\t\\(.Output | split(": ")[1] | split(" of")[0])"' | \
  jq -sR '[split("\\n")[:-1] | map(select(. != "")) | map(split("\\t") | {package: .[0], coverage: .[1]})]'
"""

[tasks."lint:check"]
description = "Run linting and formatting checks"
run = "golangci-lint run"

[tasks."lint:fix"]
description = "Auto-fix linting issues"
run = "golangci-lint run --fix"

[tasks."build:cli"]
description = "Build the CLI binary"
run = "go build -o bin/twiggit main.go"

[tasks."build:clean"]
description = "Clean build artifacts"
run = "rm -rf bin/ coverage*.out coverage.html"

[tasks."dev:run"]
description = "Test CLI structure"
run = "go run main.go --help"

[tasks."dev:tidy"]
description = "Clean up go.mod and go.sum"
run = "go mod tidy"

[env]
CGO_ENABLED = "0"